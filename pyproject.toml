[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=65.5.1",
]

[project]
name = "query-package-documentation"
version = "0.0.2"
description = "A package to explore documentations"
keywords = [
  "documentation",
  "generative-ai",
]
license = { file = "LICENSE" }
maintainers = [
  { name = "Anirban Ray", email = "39331844+yarnabrina@users.noreply.github.com" },
]
authors = [
  { name = "Anirban Ray", email = "39331844+yarnabrina@users.noreply.github.com" },
]
requires-python = "==3.11.*"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Framework :: Flake8",
  "Framework :: Pydantic",
  "Framework :: Sphinx",
  "Intended Audience :: Developers",
  "License :: OSI Approved",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development",
  "Topic :: Software Development :: Build Tools",
  "Topic :: Software Development :: Libraries",
  "Topic :: Utilities",
  "Typing :: Typed",
]
dynamic=[
  "readme",
]
dependencies = [
  "chromadb<0.5,>=0.4.15",
  "ctransformers<0.3,>=0.2.27",
  "gradio<4.17,>=4.12",
  "jq<1.7,>=1.6",
  "langchain<0.1.5,>=0.1.1",
  "numpydoc<1.7,>=1.6",
  "pydantic<2.6,>=2.4.2",
  "sentence-transformers<2.3,>=2.2.2",
  "transformers<4.38,>=4.36",
  "typer<0.10,>=0.9",
]
[project.optional-dependencies]
all = [
  "autoflake",
  "bandit",
  "black",
  "blacken-docs",
  "build",
  "codespell",
  "docformatter[tomli]",
  "flake8",
  "furo",
  "interrogate",
  "isort",
  "myst-parser[linkify]",
  "numpydoc",
  "pre-commit",
  "pylint",
  "pyproject-fmt",
  "pyupgrade",
  "Sphinx",
  "sphinx-copybutton",
  "twine",
  "validate-pyproject",
  "vulture",
]
dev = [
  "codespell",
  "numpydoc",
  "pre-commit",
]
doc = [
  "furo",
  "myst-parser[linkify]",
  "Sphinx",
  "sphinx-copybutton",
]
fine-tuning = [
  "accelerate<0.27,>=0.24.1",
  "bitsandbytes<0.43,>=0.41.2",
  "datasets<2.17,>=2.15",
  "evaluate<0.5,>=0.4.1",
  "peft<0.8,>=0.6.2",
  "safetensors<0.5,>=0.4",
  "torch<2.2,>=2.1.1",
  "transformers<4.38,>=4.36",
  "trl<0.8,>=0.7.4",
]
format = [
  "autoflake",
  "black",
  "blacken-docs",
  "docformatter[tomli]",
  "isort",
  "pyproject-fmt",
  "pyupgrade",
]
lint = [
  "bandit",
  "flake8",
  "interrogate",
  "pylint",
  "validate-pyproject",
  "vulture",
]
release = [
  "build",
  "twine",
]
[project.urls]
"Bug Tracker" = "https://github.com/yarnabrina/query-package-documentation/issues"
"Documentation" = "https://query-package-documentation.readthedocs.io"
"Source Code" = "https://github.com/yarnabrina/query-package-documentation"
[project.scripts]
docs-cli = "cli:CLI_APPLICATION"
[project.gui-scripts]
docs-gui = "gui:main"

[tool.setuptools]
py-modules = [
  "cli",
  "gui",
]

[tool.setuptools.dynamic]
readme = { file = "README.md", content-type = "text/markdown" }

[tool.setuptools.packages.find]
where = [
  "src",
]
include = [
  "generative_ai*",
]
namespaces = false

[tool.setuptools.package-data]
"generative_ai" = [
  "metadata.json",
  "py.typed",
]

[tool.setuptools.exclude-package-data]
"*" = [
  ".gitattributes",
  ".gitignore",
]

[tool.black]
line-length = 99
target-version = [
  "py311",
]

[tool.ruff]
fix = true
indent-width = 4
line-length = 99
output-format = "grouped"
preview = false
respect-gitignore = true
src = [
  "docs",
  "src",
  "tests",
]
target-version = "py311"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
indent-style = "space"
preview = false
quote-style = "double"

[tool.ruff.lint]
fixable = [
  "ALL",
]
ignore = [
  "COM",  # flake8-commas
  "CPY",  # flake8-copyright
  "D213",  # Multi-line docstring summary should start at the second line
  "DTZ",  # flake8-datetimez
  "EM",  # flake8-errmsg
  "FBT",  # flake8-boolean-trap
  "FIX",  # flake8-fixme
  "G",  # flake8-logging-format
  "ICN",  # flake8-import-conventions
  "PD",  # pandas-vet
  "RET501",  # Do not explicitly return None in function if it is the only possible return value
  "RET502",  # Do not implicitly return None in function able to return non-None value
  "RET503",  # Missing explicit return at the end of function able to return non-None value
  "RET504",  # Unnecessary assignment to {name} before return statement
  "TID252",  # Prefer absolute imports over relative imports from parent modules
  "TRY003",  # Avoid specifying long messages outside the exception class
]
ignore-init-module-imports = true
preview = false
select = [
  "ALL",
]
task-tags = [
  "TODO",
  "FIXME",
]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
  "fastapi.Depends",
  "fastapi.Query",
  "pydantic.Field",
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = [
  "typing",
  "typing_extensions",
]
quote-annotations = true
runtime-evaluated-base-classes = [
  "pydantic.BaseModel",
]
runtime-evaluated-decorators = [
  "pydantic.validate_call",
]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  "pydantic.field_validator",
]

[tool.ruff.lint.per-file-ignores]
"src/**/__init__.py" = [
  "F401",  # {name} imported but unused; consider using importlib.util.find_spec to test for availability
]
"docs/**/conf.py" = [
  "INP001",  # File {filename} is part of an implicit namespace package. Add an __init__.py.
]
"tests/**/conftest.py" = [
  "INP001",  # File {filename} is part of an implicit namespace package. Add an __init__.py.
  "PLR0913",  # Too many arguments in function definition ({c_args} > {max_args})
]
"tests/**/test_*.py" = [
  "INP001",  # File {filename} is part of an implicit namespace package. Add an __init__.py.
  "PLR0913",  # Too many arguments in function definition ({c_args} > {max_args})
  "S101",  # Use of assert detected
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 99
max-line-length = 99

[tool.ruff.lint.pydocstyle]
convention = "numpy"
ignore-decorators = [
  "typing.overload",
]
property-decorators = [
  "pydantic.computed_field",
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.isort]
overwrite_in_place = true
profile = "black"
atomic = true
line_length = 99
remove_redundant_aliases = true
src_paths = [
  "src",
]
py_version = 311

[tool.pylint.main]
extension-pkg-allow-list = [
  "pydantic",
]
fail-under = 8.5
jobs = 0
recursive = true

[tool.pylint.basic]
include-naming-hint = true

[tool.pylint.format]
max-line-length = 99

[tool.pylint.logging]
logging-format-style = "new"

[tool.pylint."messages control"]
enable = [
  "all",
]
disable = [
  "import-outside-toplevel",  # Used when an import statement is used anywhere other than the module toplevel. Move this import to the top of the file.
  "logging-fstring-interpolation",  # Used when a logging statement has a call form of "logging.<logging method>(f"...")".Use another type of string formatting instead. You can use % formatting but leave interpolation to the logging function by passing the parameters as arguments. If logging-format-interpolation is disabled then you can use str.format. If logging-not-lazy is disabled then you can use % formatting as normal.
]

[tool.pylint.reports]
output-format = "colorized"

[tool.docformatter]
in-place = true
recursive = true
wrap-summaries = 99
wrap-descriptions = 99

[tool.pytest.ini_options]
addopts = "--junit-xml=pytest_junit_report.xml --doctest-modules --doctest-ignore-import-errors --doctest-continue-on-failure"
console_output_style = "count"

[tool.coverage.run]
branch = true
command_line = "--module pytest"
data_file = "coverage_data"
include = [
  "src/**/*.py",
]
omit = [
  "tests/**/conftest.py",
  "tests/**/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "if typing.TYPE_CHECKING:",
]
fail_under = 85
include = [
  "src/**/*.py",
]
include_namespace_packages = true
omit = [
  "tests/**/conftest.py",
  "tests/**/test_*.py",
]
precision = 2
show_missing = true

[tool.coverage.html]
directory = "coverage_html_report"

[tool.coverage.xml]
output = "coverage_xml_report.xml"

[tool.mypy]
files = [
  "src",
]
exclude = [
  "conftest",
  "test_",
]
strict = true

[tool.pyright]
include = [
  "src",
]
exclude = [
  "tests/**/conftest.py",
  "tests/**/test_*.py",
]
pythonVersion = "3.11"
reportMissingImports = false

[tool.autoflake]
in-place = true
remove-all-unused-imports = true
recursive = true
expand-star-imports = true
ignore-init-module-imports = true
remove-duplicate-keys = true
remove-unused-variables = true

[tool.interrogate]
fail-under = 85
ignore-init-method = true

[tool.vulture]
min_confidence = 100
paths = [
  "src",
]

[tool.numpydoc_validation]
checks = [  # Report findings on all checks except the ones listed below "all"
  "all",
  "GL01",  # Docstring text (summary) should start in the line immediately after the opening quotes (not in the same line, or leaving a blank line in between)
  "ES01",  # No extended summary found
  "PR08",  # Parameter "{param_name}" description should start with a capital letter
  "PR09",  # Parameter "{param_name}" description should finish with "."
  "RT04",  # Return value description should start with a capital letter
  "RT05",  # Return value description should finish with "."
  "SA01",  # See Also section not found
  "EX01",  # No examples section found
]
exclude = [  # Don't report issues on objects matching any of the regular regular expressions
  "\\.__init__$",
]
